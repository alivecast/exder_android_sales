<!DOCTYPE html>
<html>
	<head>
		<title></title>

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no;" />
		<meta charset="utf-8">

		<script type="text/javascript" charset="utf-8" src="js/jquery-1.8.2.min.js"></script>
		<script type="text/javascript" charset="utf-8" src="js/base64.js"></script>
		<script type="text/javascript" charset="utf-8" src="js/aes.js"></script>
		<script type="text/javascript" charset="utf-8" src="js/main.js"></script>
		<script type="text/javascript" charset="utf-8" src="js/company.js"></script>
		<script type="text/javascript" charset="utf-8" src="js/cordova.js"></script>
		<script type="text/javascript" charset="utf-8" src="js/spin.min.js"></script>

		<script type="text/javascript">
			$(document).bind("mobileinit", function() {
				// jQuery Mobile フレームワークの設定変更は、ここで行なってください！
				$.support.cors = true;
				$.mobile.allowCrossDomainPages = true;
			});
			
			// 中途半端にローディングが表示されることの防止
			//$(document).ready(function() {
			function onBodyLoad(){
				document.addEventListener("deviceready", onDeviceReady, false);
			}//);

			function onDeviceReady() {
				companyGetSetting(setAct);
			}

			// 情報ファイルを読み込み
			function setAct(params) {

				// 商品ファイル読み込み
				var postg = {};

				var fname = 'order';
				getFile(fname, actMain, cardErrMsg);
				return false;

				function actMain(order) {

					postg['uid'] = params.uid;
					postg['act_key'] = params.act_key;
					postg['app_ver'] = params.app_ver;
					postg['app_code'] = params.app_code;
					postg['url'] = params.url;
					postg['http'] = params.http;
					postg['https'] = params.https;

					postg['qr_id'] = order.qr_id;
					postg['order_latitude'] = order.order_latitude;
					postg['order_longitude'] = order.order_longitude;

					// 処理
					setOrder(postg);
					return false;
				}

			}

			// サーバー通信を行い値を設定を行なう
			function setOrder(order) {

				var url = order.url + 'company01/receive_act.php';

				$.ajax({
					type : "POST",
					url : url,
					data : order,
					success : function(data) {
						// 戻り値により処理を振り分ける
						if (data.qr_id) {
							if (data.errmsg) {
								console.log("-- エラー--");
								var msg = {};
								msg['title'] = data.errtitle;
								msg['msg'] = data.errmsg;
								cardErrMsg(msg);
								return false;
							} else {
								console.log("-- 注文完了--");
								okMsg(data.sts);
								return false;
							}
						} else {
							console.log("-- エラー１--");
							errMsg();
							return false;
						}
					},
					error : function(data) {
						console.log("通信エラー発生");
						errMsg();
					}
				});

			}

			function okMsg(sts) {
				// オーダーを削除
				message = '処理を完了しました。';
				title = '正常終了';
				button = 'OK';
			//	navigator.notification.alert(message, okMsgCallBackOk(), title, button);
				navigator.notification.alert(message, okMsgCallBackOk(sts), title, button);

				// 商品情報クリア
				fname = 'order';
				var order = {};
				order['qr_id'] = "";
				setFile(fname, order);
			//	if (sts) {
			//		location.href = 'show_item_index.html';
			//	} else {
			//		location.href = 'barcode.html';
			//	}
			}
			function okMsgCallBackOk(sts){
				if (sts) {
					location.href = 'show_item_index.html';
				} else {
					location.href = 'barcode.html';
				}
			}

			function cardErrMsg(msg) {
				// カードエラー
				button = 'OK';
				if (msg.title) {
				} else {
					msg.title = "QRコードエラー";
				}
				if (msg.msg) {
				} else {
					msg.msg = "情報に誤りがあります。もう一度、バーコードを撮り直してください。";
				}
				navigator.notification.alert(msg.msg, qrcodeErrorCallBackOk(), msg.title, button);
				//location.href = 'barcode.html';
			}
			function qrcodeErrorCallBackOk() {
				location.href = 'barcode.html';
			}

			function errMsg() {
				message = '通信が混み合っているか、通信環境がよくないため、もうしばらくお待ちしてから、接続しなおしてください。';
				title = 'サーバーと通信できませんでした';
				button = 'OK';
				navigator.notification.alert(message, errMsgCallBack(), title, button);
				//location.href = 'show_item_index.html';
			}
			function errMsgCallBack() {
				location.href = 'show_item_index.html';
			}

		</script>
	</head>
	<body onload="onBodyLoad()">
		<div data-role="page" id="page_itemDetail" data-add-back-btn="false" data-theme="z">
			<!-- loading -->
			<div class="loading" data-role="content" id="loading">
				<div class="loading_box">
					<p>
						しばらくおまちください
					</p>
					<div id="loadingImg" class="square-droid"></div>
					<script>
						var opts = {
							lines : 15, // The number of lines to draw
							length : 28, // The length of each line
							width : 5, // The line thickness
							radius : 14, // The radius of the inner circle
							corners : 1, // Corner roundness (0..1)
							rotate : 0, // The rotation offset
							color : '#fff', // #rgb or #rrggbb
							speed : 1, // Rounds per second
							trail : 60, // Afterglow percentage
							shadow : false, // Whether to render a shadow
							hwaccel : false, // Whether to use hardware acceleration
							className : 'spinner', // The CSS class to assign to the spinner
							zIndex : 2e9//, // The z-index (defaults to 2000000000)
						//	top : 'auto', // Top position relative to parent in px
						//	left : 'auto' // Left position relative to parent in px
						};
						var target = document.getElementById('loadingImg');
						var spinner = new Spinner(opts).spin(target);
					</script>
				</div>
			</div>
		</div>
	</body>
</html>
